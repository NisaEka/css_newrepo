plugins {
    id "com.android.application"
    // START: FlutterFire Configuration
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    // END: FlutterFire Configuration
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}


def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}


def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}


def mapsProperties = new Properties()
def localMapsPropertiesFile = rootProject.file('local_maps.properties')
if (localMapsPropertiesFile.exists()) {
    project.logger.info('Load maps properties from local file')
    localMapsPropertiesFile.withReader('UTF-8') { reader ->
        mapsProperties.load(reader)
    }
} else {
    project.logger.info('Load maps properties from environment')
    try {
        mapsProperties['MAPS_API_KEY'] = System.getenv('MAPS_API_KEY')
    } catch (NullPointerException e) {
        project.logger.warn('Failed to load MAPS_API_KEY from environment.', e)
    }
}
def mapsApiKey = mapsProperties.getProperty('MAPS_API_KEY')
if (mapsApiKey == null) {
    mapsApiKey = ""
    project.logger.error('Google Maps Api Key not configured. Set it in `local_maps.properties` or in the environment variable `MAPS_API_KEY`')
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = new File(rootDir.getAbsolutePath() + "/keystore.properties")

if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    println "✅ keystore.properties loaded"
    println "→ storeFile = ${keystoreProperties['storeFile']}"
    println "→ storeFile exists? " + file(keystoreProperties['storeFile']).exists()
} else {
    throw new GradleException("❌ keystore.properties NOT FOUND")
}


android {
    namespace "com.jne.css.css_mobile"
    compileSdkVersion 34
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.jne.cssmobile"
        minSdkVersion 21
        multiDexEnabled true
        targetSdkVersion 34
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        manifestPlaceholders = [MAPS_API_KEY: mapsApiKey]
    }

    signingConfigs {
        release {
            def storePath = keystoreProperties['storeFile']
            if (storePath) {
                def storeFileResolved = file(storePath)
                if (storeFileResolved.exists()) {
                    println("✅ storeFile path valid: ${storeFileResolved}")
                    storeFile storeFileResolved
                    storePassword keystoreProperties['storePassword']
                    keyAlias keystoreProperties['keyAlias']
                    keyPassword keystoreProperties['keyPassword']
                } else {
                    throw new GradleException("❌ storeFile path exists=false: ${storeFileResolved}")
                }
            } else {
                throw new GradleException("❌ storeFile path is NULL")
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

        }
    }


    flavorDimensions "app"

    productFlavors {
        dev {
            dimension "app"
            versionNameSuffix "-dev"
            applicationIdSuffix ".dev"
            resValue "string", "app_name", "CSS DEV"
        }
        stg {
            dimension "app"
            versionNameSuffix "-stg"
            applicationIdSuffix ".stg"
            resValue "string", "app_name", "CSS STG"
        }
        prod {
            dimension "app"
            resValue "string", "app_name", "CSS"
        }

        applicationVariants.all { variant ->
            variant.outputs.all {
                def flavor = variant.name
                def versionName = variant.versionName
                outputFileName = "css${flavor}_${versionName}.apk"
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation(platform("com.google.firebase:firebase-bom:33.1.1"))
    implementation("com.google.firebase:firebase-crashlytics")
    implementation("com.google.firebase:firebase-analytics")
    implementation 'com.android.support:multidex:2.0.1'
    implementation 'com.google.android.material:material:1.12.0-alpha03'
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation("com.google.firebase:firebase-appdistribution-api-ktx:16.0.0-beta11")
    implementation "androidx.activity:activity:1.6.0-alpha05"
}
